name: go-build
on:
  workflow_call:
    inputs:
      PRIMUS_REF:
        description: 'The primus ref to checkout.'
        required: true
        default: 'main'
        type: string
      GO_NAME:
        description: 'The name of the go project.'
        type: string
      GO_DOWNLOAD_ARTIFACT_NAME:
        description: 'The artifact name to download.'
        type: string
      GO_DOWNLOAD_ARTIFACT_PATH:
        description: 'Path of the artifact to download.'
        type: string
      GO_DOWNLOAD_ARTIFACT_REPO:
        description: 'The repository to download the artifact from. If not provided, the default is the current repository.'
        type: string
      GO_DOWNLOAD_ARTIFACT_RUN_ID:
        description: 'The run id of the artifact to download. If not provided, the default is the current run id.'
        type: string
      GO_BUILD_CONTEXT:
        description: 'The directory path containing the main package.'
        required: true
        type: string
      GO_BUILD_FLAGS:
        description: 'Additional build flags to be passed.'
        required: true
        type: string
      GO_CGO_ENABLED:
        description: 'Whether to enable CGO. Set to 1 to enable CGO. If not provided, the default is 0.'
        default: '0'
        type: string
      DOCKER_BASE_IMAGES:
        description: 'List of docker base images in json.'
        required: true
        type: string
      DOCKER_DOCKERFILE_PATH:
        description: 'Path to dockerfile.'
        required: true
        type: string
      DOCKER_MANIFEST:
        description: 'Whether to push the docker image or not.'
        required: true
        type: boolean
      DOCKER_PROVIDERS:
        description: 'The docker providers to use, separated by spaces. (dockerhub gcp aws)'
        default: 'dockerhub'
        type: string

defaults:
  run:
    shell: bash

env:
  PRIMUS_HOME: .primus
  MAKE: make --no-print-directory --makefile=.primus/src/make/main.mk

jobs:
  go:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_type == 'tag' && 'production' || github.ref_name == 'main' && 'staging' || 'review' }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: self-checkout
        uses: actions/checkout@v4
      - id: token
        name: github-token-gen
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.PRIMUS_APP_ID }}
          private-key: ${{ secrets.PRIMUS_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - name: primus-checkout
        uses: actions/checkout@v4
        with:
          repository: signoz/primus
          ref: ${{ inputs.PRIMUS_REF }}
          path: .primus
          token: ${{ steps.token.outputs.token }}
      - name: qemu-install
        uses: docker/setup-qemu-action@v3
      - name: go-install
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: info
        run: |
          $MAKE info
      - name: download-artifact
        if: ${{ inputs.GO_DOWNLOAD_ARTIFACT_NAME && inputs.GO_DOWNLOAD_ARTIFACT_PATH }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.GO_DOWNLOAD_ARTIFACT_NAME }}
          path: ${{ inputs.GO_DOWNLOAD_ARTIFACT_PATH }}
          repository: ${{ inputs.GO_DOWNLOAD_ARTIFACT_REPO || github.repository }}
          run-id: ${{ inputs.GO_DOWNLOAD_ARTIFACT_RUN_ID || github.run_id }}
      - name: cross-compilation-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
      - name: build-variables
        run: |
          # Go build variables
          if [ "${{ inputs.GO_NAME }}" != "" ]; then
            echo "NAME='${{ inputs.GO_NAME }}'" >> $GITHUB_ENV
          fi
          echo "GO_BUILD_CONTEXT='${{ inputs.GO_BUILD_CONTEXT }}'" >> $GITHUB_ENV
          echo "GO_CGO_ENABLED='${{ inputs.GO_CGO_ENABLED }}'" >> $GITHUB_ENV
          echo "GO_BUILD_FLAGS='${{ inputs.GO_BUILD_FLAGS }}'" >> $GITHUB_ENV

          # Docker build variables
          echo "DOCKER_BASE_IMAGES='${{ inputs.DOCKER_BASE_IMAGES }}'" >> $GITHUB_ENV
          echo "DOCKER_DOCKERFILE_PATH='${{ inputs.DOCKER_DOCKERFILE_PATH }}'" >> $GITHUB_ENV

          # Docker manifest variables
          echo "DOCKER_MANIFEST='${{ inputs.DOCKER_MANIFEST }}'" >> $GITHUB_ENV
          echo "DOCKER_PROVIDERS='${{ inputs.DOCKER_PROVIDERS }}'" >> $GITHUB_ENV
      - name: go-build
        run: |
          $MAKE go-build
      - name: docker-build
        run: |
          $MAKE docker-build
      - name: docker-auth
        if: ${{ inputs.DOCKER_MANIFEST && contains(inputs.DOCKER_PROVIDERS, 'dockerhub') }}
        run: |
          echo "HUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}'" >> $GITHUB_ENV
          echo "HUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}'" >> $GITHUB_ENV
      - name: docker-manifest
        if: ${{ inputs.DOCKER_MANIFEST }}
        run: |
          $MAKE docker-login docker-push docker-manifest
